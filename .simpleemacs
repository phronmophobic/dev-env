
(setq-default indent-tabs-mode nil);

(setq-default iswitchb-mode t);
(setq-default python-remove-cwd-from-path nil)
(setq-default set-mark-command-repeat-pop t)
(setq-default x-select-enable-clipboard t)
(setq-default mark-ring-max 5)
(setq-default initial-major-mode 'text-mode)

(setq inhibit-startup-message t) ;will inhibit startup messages.

(global-auto-revert-mode t)
; change yes or no prompt to y or n
(fset 'yes-or-no-p 'y-or-n-p)

(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
             '("melpa" . "https://stable.melpa.org/packages/"))


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cider-auto-jump-to-error nil)
 '(cider-show-error-buffer nil)
 '(ido-enable-flex-matching t)
 '(ido-everywhere t)
 '(ido-mode (quote both) nil (ido))
 '(initial-buffer-choice t)
 '(show-paren-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command) 

;; Transpose line
(defun move-line (n)
  "Move the current line up or down by N lines."
  (interactive "p")
  (setq col (current-column))
  (beginning-of-line) (setq start (point))
  (end-of-line) (forward-char) (setq end (point))
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (insert line-text)
    ;; restore point to original column in moved line
    (forward-line -1)
    (forward-char col)))

(defun move-line-up (n)
  "Move the current line up by N lines."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))

(defun move-line-down (n)
  "Move the current line down by N lines."
  (interactive "p")
  (move-line (if (null n) 1 n)))

(global-set-key (kbd "ESC p") 'move-line-up)
(global-set-key (kbd "ESC <up>") 'move-line-up)
(global-set-key (kbd "ESC n") 'move-line-down)
(global-set-key (kbd "ESC <down>") 'move-line-down)

;; comment-dwim is toggle comment
;; Original idea from
;; http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html
(defun comment-dwim-line (&optional arg)
  "Replacement for the comment-dwim command.
   Just toggle comment"
  (interactive "*P")
  
  (comment-normalize-vars)
  (if (use-region-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (comment-or-uncomment-region (line-beginning-position) (line-end-position))))

(global-set-key "\M-;" 'comment-dwim-line)


(add-hook 'nrepl-interaction-mode-hook
          'eldoc-mode)
;; (add-hook 'nrepl-connected-hook 'rainbow-delimiters-mode)
(add-hook 'nrepl-connected-hook 'paredit-mode)

(add-hook 'cider-mode-hook
          (lambda ()
            (eldoc-mode)
            (eldoc-add-command-completions
             "paredit-newline"
             "just-one-space")))


(add-hook 'clojure-mode-hook
          (lambda ()
            (eldoc-mode)
            (require 'paredit)
            (paredit-mode +1)))


(add-hook 'nrepl-mode-hook
          (lambda ()
            (local-set-key (kbd "ESC p") 'nrepl-backward-input)
            (local-set-key (kbd "ESC n") 'nrepl-forward-input)
            (local-set-key (kbd "ESC <up>") 'nrepl-backward-input)
            (local-set-key (kbd "ESC <down>") 'nrepl-forward-input)))




(eval-after-load 'paredit
  '(progn
     (define-key paredit-mode-map (kbd "C-c {") 'paredit-backward-barf-sexp)
     (define-key paredit-mode-map (kbd "C-c }") 'paredit-forward-barf-sexp)
     (define-key paredit-mode-map (kbd "C-c (") 'paredit-backward-slurp-sexp)
     (define-key paredit-mode-map (kbd "C-c )") 'paredit-forward-slurp-sexp)
     ;; (define-key paredit-mode-map (kbd "ESC p") 'paredit-splice-sexp-killing-backward)
     ;; (define-key paredit-mode-map (kbd "ESC n") 'paredit-splice-sexp-killing-forward)
     (define-key paredit-mode-map (kbd "M-[") 'paredit-wrap-square)
     (define-key paredit-mode-map (kbd "M-;") 'comment-dwim-line)))

;; comment-dwim is toggle comment
;; Original idea from
;; http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html
(defun comment-dwim-line (&optional arg)
    "Replacement for the comment-dwim command.
   Just toggle comment"
    (interactive "*P")

    (comment-normalize-vars)
    (if (use-region-p)
        (comment-or-uncomment-region (region-beginning) (region-end))
      (comment-or-uncomment-region (line-beginning-position) (line-end-position))))

(global-set-key "\M-;" 'comment-dwim-line)
